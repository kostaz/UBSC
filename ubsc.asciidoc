= Understanding Bitcoin Source Code
Kosta Zertsekel <zertsekel@gmail.com>
v0.1, 3.6.2018: First draft



== Bitcoin Private Keys

Private key is a secret blablabla...
Private key size is *always* 32 bytes.
To be more exact, private key size is **always** 256 bits.
Example of private key:
```
E9873D79C6D87DC0FB6A5778633389F4453213303DA61F20BD67FC233AA33262
```

The easy way to verify private key size in linux shell is:
```
$ echo -n E9873D79C6D87DC0FB6A5778633389F4453213303DA61F20BD67FC233AA33262 | wc -c
64
```

[NOTE]
====
In `echo -n` command, `-n` says "do not output the trailing newline".
====

=== Bitcoin Core

In Bitcoin Core a private key is essentially `std::vector` of bytes.
Or, to be more exact, `std::vector<unsigned char>`.

[source,cpp,title='key.h (bitcoin/src/)']
```
typedef std::vector<unsigned char> CPrivKey;
```

Actually, `CPrivKey` is a serialized private key.
Here, "serialized" means that *all* the parameters of the private key are included.

=== Libbitcoin

[source,cpp,title='data.hpp (include/bitcoin/bitcoin/utility/)']
```
// Define a byte array of a specified length.
template <size_t Size>
using byte_array = std::array<uint8_t, Size>;
```

[source,cpp,title='elliptic_curve.hpp (libbitcoin/include/bitcoin/bitcoin/math/)']
```
static constexpr size_t ec_secret_size = 32;
typedef byte_array<ec_secret_size> ec_secret;
```

=== Bitcoin Go

[source,cpp,title='privkey.go (btcd/btcec/)']
```
// PrivateKey wraps an ecdsa.PrivateKey as a convenience mainly for signing
// things with the the private key without having to directly import the ecdsa
// package.
type PrivateKey ecdsa.PrivateKey
```

